#!/usr/bin/env python3

import argparse
import sys
import itertools as it


def main():
    parser = argparse.ArgumentParser(description='Calculate the mismatch rate at each position')
    parser.add_argument('BED', type=argparse.FileType('r'), help='Matched BED file generated by match_analysis.py')
    parser.add_argument('-o', default=sys.stdout, type=argparse.FileType('w'), help='Output to file')
    parser.add_argument('-a', action='store_true', help='Output all locations instead of only the one with mismatch')
    args = parser.parse_args()

    # determine dinuc or mono
    l = args.BED.readline()
    ws = l.split('\t')
    length = len(ws[3])
    args.BED.seek(0)

    # initialization
    bases = ['A','C','G','T']
    id = 0
    order = {}
    for k in it.product(bases, repeat=length):
        order[''.join(k)] = id
        id += 1
    data = {}

    # deal with each bed file
    for l in args.BED:
        ws = l.rstrip().split('\t')
        if ws[3] not in order or ws[4] not in order:
            continue
        loc = (ws[0], ws[1],ws[2], ws[5])
        if loc not in data:
            data[loc] = [0] * (1 + 4**length)
        data[loc][0] = ws[4]
        data[loc][order[ws[3]]+1] += 1

    # calc fraction
    for k in data.keys():
        total = sum(data[k][1:])
        for i in range(1, len(data[k])):
            data[k].append(data[k][i]/total)

    # output
    args.o.write('\t'.join(['Chromosome', 'Start', 'End', 'Strand', 'Total', 'Ref', 'Match_rate', 'Mismatch_rate'] \
                           + list(sorted(order.keys(), key=lambda x: order[x]))\
                           + [f'{x}_fraction' for x in sorted(order.keys(), key=lambda v: order[v])]) + '\n')
    for k, v in data.items():
        if args.a or v[1+len(order)+order[v[0]]] != 1:
            args.o.write('\t'.join(list(k) + [str(sum(v[1:1+len(order)])), v[0],\
                                              str(v[1+len(order)+order[v[0]]]), str(1-v[1+len(order)+order[v[0]]])]\
                                   + [str(x) for x in v[1:]]) + '\n')

    print('Done!')

if __name__ == '__main__':
    main()
